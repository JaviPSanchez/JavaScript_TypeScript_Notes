require('./node_modules/lodash-es/cloneDeep.js');
var _shoppingCartJs = require('./1705-shoppingCart.js');
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
var _shoppingCartJsDefault = _parcelHelpers.interopDefault(_shoppingCartJs);
require('core-js/stable');
require('corejs/stable/array/find');
require('corejs/stable/promise');
_shoppingCartJsDefault.default('pizza', 2);
_shoppingCartJsDefault.default('bread', 5);
_shoppingCartJsDefault.default('apples', 4);
console.log(_shoppingCartJs.cart);
const state = {
  cart: [{
    product: 'bread',
    quantity: 5
  }, {
    product: 'pizza',
    quantity: 5
  }],
  user: {
    loggedIn: true
  }
};
/*
Now that we activated bundling it's time to configure Babel to transpile our super modern code back to ES5 code. And this is still important right now even many years after the new ES6 standard has been introduced. And the reason for that is simply that there are still many people out there who are stuck on like a windows XP or windows 7 computer!!! and they cannot upgrade their old internet explorers but we want our applications to work for everyone. And so we need to keep everyone in mind.

Now, the good news is that parcel actually automatically uses Babel to transpile or code. And we can configure Babel a lot if we want to for example defining exactly what browsers should be supported but as always, that's a ton of work.
And so we don't want that. And instead parcel makes some very good default decisions for us. And so we will simply mainly just go with these defaults.

Now just so you get a very broad and very general overview of how Babel works.
Let's just take a look at their website. So that's Babeljs.io and then here in the documentation let's take a look here at plugins. Okay. So basically Babel works with plugins and presets that can both be configured. Now a plugin is basically a specific JavaScript feature that we want to transpile. So to convert.
So for example let's say we only wanted to convert arrow functions back to ES5
but leave everything else in ES6 for example, const and var declarations.
Now usually that doesn't make a lot of sense because basically we will want to transpile everything at the same time.

And so usually instead of using single plugins for each of these features, Babel actually uses presets. And so a preset is basically a bunch of plugins bundled together. And its by default parcel is going to use this preset here.

@babel/preset-env

And this preset will automatically select which JavaScript features should be compiled based on browser support. And again that will all happen automatically
and out of the box Babel will convert all features So only browsers that are barely used anymore with the market share of less than 0.25% are not going to be supported by the transpiling with this preset here.

So, that's a very brief overview and we will come back here in a second but for now let's start on npm run start script again:

ðŸ‘‰ npm run start

just so we can take a look again at our final output.

And so now the script it ads:

<script defer="" src="/index.f8345a9e.js"></script>

So this one and we can see right away that ES6 is no longer there. So here we have var instead of const that we had before. Let's see if we have something else.
There are not template literal either. So everything that we used from ES6 is now gone. But now let me show you something important.

So let's write some code here which is basically not part of this preset here:

@babel/preset-env

because this preset-env does actually only include final features. So features that are already part of the language after passing the four stages of the AGMA process.

However, previously we used class fields which at the time of recording are only at stage three. And so let me show you how we could transpile a class fields as well. So let's just write a simple example here:
*/
class Person {
  // We make this private with #:
  #undefined = 'Hey';
  constructor(name) {
    this.name = name;
    console.log(`${this.#undefined}, ${this.name}`);
  }
}
const javi = new Person('Javi');
// Hey, Javi
/*
Podemos ver como lo convierte en ES5:




Now there's still two more things that I need to show you here still. And so let's write some more code here. So what I will do now is to use the ES6 find method to find products in a cart that are edit more than twice:
*/
console.log(_shoppingCartJs.cart.find(el => el.quantity >= 2));
/*
Remember this is an ES6 method so the arrow function that we had is gone and it was replaced by this regular function. However, the ES6 method find is still here. So it has not been converted to ES5.

Now the same is too for other things for example, let's try promises:
*/
Promise.resolve('TEST').then(x => console.log(x));
