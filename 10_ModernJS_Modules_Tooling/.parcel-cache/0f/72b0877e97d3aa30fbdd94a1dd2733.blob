"use strict";
var _shoppingCartJs = require('./1705-shoppingCart.js');
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
var _shoppingCartJsDefault = _parcelHelpers.interopDefault(_shoppingCartJs);
require('lodash');
_shoppingCartJsDefault.default('pizza', 2);
_shoppingCartJsDefault.default('bread', 5);
_shoppingCartJsDefault.default('apples', 4);
console.log(_shoppingCartJs.cart);
/*
And so basically in this example, the goal of using Parcel is to bundle these three modules together. So 1711-BundlingWithparcelAndNPMScripts.js together with 1705-shoppingCart.js and together with this cloneDeep 1710-LodashLibrary-CloneDeep.js

And so let's actually try this now. So I'm hitting enter here and now it's going to take some time and do some magic behind the scenes, but now it is actually done. So a Parcel actually then also starts a new development server on this URL:
http://localhost:1234

So let's click that. And so you'll see it opened a new tab. So basically besides only bundling, it also does exactly the same job as our live server but in a different port.

If we had any error installing Parcel, we can try installing it with sudo which will give you basically more permissions:

ðŸ‘‰ sudo npm i parcel

This will then ask you for your password and then hopefully that's going to work.

Now, if that doesn't fix it, then you have to install exactly the same version
as I am using here. So we can read that in our package.json file. And so here you see that I'm using version 1.12.4. And so you can NPM install exactly this version
by writing at and then 1.12.4:

ðŸ‘‰ npm i parcel@1.12.4

So maybe you have version 2 already installed because it's going to be coming out very soon. De echo esa es la version que tengo la ^2.0.0-beta.2

Si aun asi no funciona podemos siempre desinstalar:

ðŸ‘‰ npm uninstall parcel

Now speaking of errors, we do actually have one error here coming from our code But the problem for all of that is that we still have the type="module" here:

<script
type="module"  ðŸ’¥ Podemos quitarlo con Parcel
defer
src="1711-BundlingWithparcelAndNPMScripts.js"
></script>

However, what Parcel does is that it basically, simply, creates a script. And so now we are actually no longer using a module but we are back to using a regular script. And that is important because modules do not work in older browsers.

But now let's actually take a look at what Parcel did here. So what it did was to create this dist folder, which stands for distribution, because it is essentially gonna be this folder that we will send for production. So basically it's the code in this folder that we will send to our final users. So you'll see it created a new index.html  and also a bunch of JavaScript files.

So let's take a look at this index here. And so you see that it has created a new script tag:

<script defer="" src="/index.f8345a9e.js"></script>

And so this new script here is basically the bundle itself. So it's this file:

index.f8345a9e.js

And so here you already see that it does include some of the stuff that we have in our other modules. All of this is created by Parcel, of course. So you see a lot of code created by Parcel. So in the real world, you will not take a look at this code, but I just wanted to show you that, of course, all of our code is now in here.

And so indeed all the code that we had before, spread across multiple modules, is now all in this script. And so that's exactly the goal that we had. And unused code has probably also not yet been removed but we will leave that for later.

So that's going to be the build step but what we're doing right now is the development step. And so in order for us to be able to check the code during development, it will not compress everything.

So of course, whenever we now save this file:

1711-BundlingWithparcelAndNPMScripts.js

then it will reload this file here, just as we had before with live server, right?
So as I saved you see that everything here reloaded, right? However, in Parcel, we can activate something even better, which is called hot module replacement.

So we can write:
*/
if (module.hot) {
  module.hot.accept();
}
