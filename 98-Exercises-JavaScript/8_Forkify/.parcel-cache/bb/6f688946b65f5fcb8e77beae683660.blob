var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _modelJs = require("./model.js");
var _configJs = require("./config.js");
var _recipeViewJs = require("./views/recipeView.js");
var _recipeViewJsDefault = parcelHelpers.interopDefault(_recipeViewJs);
// import searchView from './views/searchView.js';
// import resultsView from './views/resultsView.js';
// import paginationView from './views/paginationView.js';
// import bookmarksView from './views/bookmarksView.js';
// import addRecipeView from './views/addRecipeView.js';
var _stable = require("core-js/stable");
var _runtime = require("regenerator-runtime/runtime");
var _regeneratorRuntime = require("regenerator-runtime");
const controlRecipes = async function() {
    try {
        const id = window.location.hash.slice(1);
        if (!id) return;
        _recipeViewJsDefault.default.renderSpinner();
        // 0) Update results view to mark selected search result
        resultsView.update(_modelJs.getSearchResultsPage());
        // 1) Updating bookmarks view
        bookmarksView.update(_modelJs.state.bookmarks);
        // 2) Loading recipe
        await _modelJs.loadRecipe(id);
        // 3) Rendering recipe
        _recipeViewJsDefault.default.render(_modelJs.state.recipe);
    } catch (err) {
        _recipeViewJsDefault.default.renderError();
        console.error(err);
    }
};
const controlSearchResults = async function() {
    try {
        resultsView.renderSpinner();
        // 1) Get search query
        const query = searchView.getQuery();
        if (!query) return;
        // 2) Load search results
        await _modelJs.loadSearchResults(query);
        // 3) Render results
        resultsView.render(_modelJs.getSearchResultsPage());
        // 4) Render initial pagination buttons
        paginationView.render(_modelJs.state.search);
    } catch (err) {
        console.log(err);
    }
};
const controlPagination = function(goToPage) {
    // 1) Render NEW results
    resultsView.render(_modelJs.getSearchResultsPage(goToPage));
    // 2) Render NEW pagination buttons
    paginationView.render(_modelJs.state.search);
};
const controlServings = function(newServings) {
    // Update the recipe servings (in state)
    _modelJs.updateServings(newServings);
    // Update the recipe view
    _recipeViewJsDefault.default.update(_modelJs.state.recipe);
};
const controlAddBookmark = function() {
    // 1) Add/remove bookmark
    if (!_modelJs.state.recipe.bookmarked) _modelJs.addBookmark(_modelJs.state.recipe);
    else _modelJs.deleteBookmark(_modelJs.state.recipe.id);
    // 2) Update recipe view
    _recipeViewJsDefault.default.update(_modelJs.state.recipe);
    // 3) Render bookmarks
    bookmarksView.render(_modelJs.state.bookmarks);
};
const controlBookmarks = function() {
    bookmarksView.render(_modelJs.state.bookmarks);
};
const controlAddRecipe = async function(newRecipe) {
    try {
        // Show loading spinner
        addRecipeView.renderSpinner();
        // Upload the new recipe data
        await _modelJs.uploadRecipe(newRecipe);
        console.log(_modelJs.state.recipe);
        // Render recipe
        _recipeViewJsDefault.default.render(_modelJs.state.recipe);
        // Success message
        addRecipeView.renderMessage();
        // Render bookmark view
        bookmarksView.render(_modelJs.state.bookmarks);
        // Change ID in URL
        window.history.pushState(null, '', `#${_modelJs.state.recipe.id}`);
        // Close form window
        setTimeout(function() {
            addRecipeView.toggleWindow();
        }, _configJs.MODAL_CLOSE_SEC * 1000);
    } catch (err) {
        console.error('ðŸ’¥', err);
        addRecipeView.renderError(err.message);
    }
};
const init = function() {
    // bookmarksView.addHandlerRender(controlBookmarks);
    _recipeViewJsDefault.default.addHandlerRender(controlRecipes);
    _recipeViewJsDefault.default.addHandlerUpdateServings(controlServings);
    _recipeViewJsDefault.default.addHandlerAddBookmark(controlAddBookmark);
// searchView.addHandlerSearch(controlSearchResults);
// paginationView.addHandlerClick(controlPagination);
// addRecipeView.addHandlerUpload(controlAddRecipe);
};
init();
